-- day 0 ----
1. show a list of men working at google and group them by the country they are from. columns: email , gender, country_of_birth, count
2. show a list of people working at google and group them by the country they are from
3. get the number of men working at google and are in the same country
4. get the number of women working at google and are in the same country
5. get the number of people working at google and are in the same country
6. show a country with the most people working at google 
7. show a list of the most gender born in the UK
-- day 1 ----
-.create another table (or relation) called cars. and provide the following fields:
	make
	model
	price
	year
8. add an age column as an alias to a function to calculate the age of all cars, display both make and age
9. add a discount column as an alias to a function to calculate a 20% discount on all cars. display make, price and discount
10. get the 2 most expensive cars sold in 2000
11. get the cars with 20% discount less than $3000000 display the make price and discount
12. get the cars younger than 45 years. display the make and the age
13. get the two most sold car models
14. get the sum of all car prices sold each year
15. get the average price of a Ford car
16. make sure that no two persons can have the same email
17. insert first_name, gender and country_of_birth into a person row with an existing email, and it must not fail
18. do not allow inserting a car that is more than 50 years old
-- day 2 ----
-.
19. create a one-to-one relationship between the two tables: person, cars
+20. change the primary keys to a UUID4 generated identifier on both tables
	. using loops and functions, make sure that each row in the person table references a car correctly (if any)
	. in the cars table and that all cars have an owner_id
21. for every person on the person table, get the person's first name + their car details.
	. anyone that doesn't have a car should have the car fields as null
22. for every car on the cars table, get the car make and price + their owner details (mapping to person).
	. anyone that doesn't have an owner should not be listed
23. for every car on the cars table, get the car make + the owner first name (mapping to person). USE LEFT JOIN
24. for every person on the person table, get the person's first_name and email + their car make (column should be car_make).
	. anyone that doesn't have a car should not be listed
TODO:
